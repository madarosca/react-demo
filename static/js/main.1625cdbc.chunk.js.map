{"version":3,"sources":["store/index.js","reducers/index.js","reducers/loading.js","constants/action-types.js","containers/Main.js","containers/views/AboutPage/index.js","containers/views/DnD/index.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["storeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","appReducer","global","dispatch","type","payload","Promise","resolve","getState","combineReducers","router","loading","state","action","Main","props","children","About","Dnd","Routes","createBrowserHistory","HashRouter","basename","Switch","Route","path","exact","component","DnD","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAA,+BAGMA,EAAiBC,OAAOC,sCAAwCC,IAGhEC,EAAQC,YAAYC,IAFL,GAE+BN,KAIpDO,EAAOC,SAAW,SAACC,EAAMC,GACxB,OAAID,EAAKA,KACDE,QAAQC,QAAQR,EAAMI,SAASC,IAE/BE,QAAQC,QAAQR,EAAMI,SAAS,CAAEC,OAAMC,cAGhDH,EAAOM,SAAWT,EAAMS,SAETT,Q,qECfTE,EAAaQ,YAAgB,CACjCC,uBACAC,QCJa,WAA4B,IAA3BC,EAA0B,wDAAXC,EAAW,uCACtC,OAAQA,EAAOT,MACX,ICJe,UDKX,OAAOS,EAAOR,QAClB,QACI,OAAOO,MDEJ,aAACA,EAAOC,GACrB,OAAOZ,EAAWW,EAAOC,K,yPGJZC,EAJF,SAACC,GACb,OAAO,6BAAMA,EAAMC,WCGLC,EAJD,WACb,OAAO,uCCGOC,EAJH,WACX,OAAO,6CCMaC,GAFEC,c,uKAIrB,OACC,kBAACC,EAAA,EAAD,CAAYC,SAAS,KACpB,kBAAC,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAOC,KAAM,cAAeC,OAAK,EAACC,UAAWV,IAC7C,kBAACO,EAAA,EAAD,CAAOC,KAAM,OAAQE,UAAWC,W,GAPFC,cCGrBC,EARH,WACX,OACC,yBAAKC,UAAU,OACd,kBAAC,EAAD,QCKiBC,QACU,cAA7BpC,OAAOqC,SAASC,UAEc,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MAAM,2DCTjCC,IAASC,OACR,kBAAC,IAAD,CAAUtC,MAAOA,KAChB,kBAAC,EAAD,OAEDuC,SAASC,eAAe,SDgHpB,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAACC,GACNA,EAAaC,gBAEbC,OAAM,SAACC,GACPC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1625cdbc.chunk.js","sourcesContent":["import { createStore, compose } from 'redux'\nimport appReducer from '../reducers'\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst initialState = {}\n\nconst store = createStore(appReducer, initialState, storeEnhancers())\n\n// Set globals\n\nglobal.dispatch = (type, payload) => {\n\tif (type.type) {\n\t\treturn Promise.resolve(store.dispatch(type))\n\t} else {\n\t\treturn Promise.resolve(store.dispatch({ type, payload }))\n\t}\n}\nglobal.getState = store.getState\n\nexport default store\n","import { combineReducers } from 'redux'\nimport { routerReducer as router } from 'react-router-redux'\nimport loading from './loading'\n\nconst appReducer = combineReducers({\n  router,\n  loading,\n})\n\nexport default (state, action) => {\n  return appReducer(state, action)\n}\n","import { LOADING } from '../constants/action-types';\n\nexport default (state = false, action) => {\n    switch (action.type) {\n        case LOADING:\n            return action.payload;\n        default:\n            return state;\n    }\n}","export const LOADING = 'LOADING'\n","import React from 'react'\n\nconst Main = (props) => {\n\treturn <div>{props.children}</div>\n}\n\nexport default Main\n","import React from 'react'\n\nconst About = () => {\n\treturn <div>Hello</div>\n}\n\nexport default About\n","import React from 'react'\n\nconst Dnd = () => {\n\treturn <div>Drag & Drop</div>\n}\n\nexport default Dnd\n","import React, { Component } from 'react'\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport Main from '../containers/Main'\nimport About from '../containers/views/AboutPage'\nimport DnD from '../containers/views/DnD'\n\nconst browserHistory = createBrowserHistory()\n\nexport default class Routes extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<HashRouter basename='/'>\n\t\t\t\t<Main>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={'/react-demo'} exact component={About} />\n\t\t\t\t\t\t<Route path={'/dnd'} component={DnD} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Main>\n\t\t\t</HashRouter>\n\t\t)\n\t}\n}\n","import React from 'react'\nimport './App.css'\nimport Routes from './routes'\n\nconst App = () => {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Routes />\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.')\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error)\n\t\t})\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type')\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.')\n\t\t})\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister()\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message)\n\t\t\t})\n\t}\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}